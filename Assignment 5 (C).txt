1.Write a C program to reverse a string using stack.

#include <stdio.h>  
#include <string.h>  
  
#define max 100  
int top,stack[max];  
  
void push(char x){  
  
      // Push(Inserting Element in stack) operation  
      if(top == max-1){  
          printf("stack overflow");  
      }  else {  
          stack[++top]=x;  
      }  
  
}  
  
void pop(){  
    // Pop (Removing element from stack)  
      printf("%c",stack[top--]);  
}  
  
  
main()  
{  
   char str[]="sri lakshmi";  
   int len = strlen(str);  
   int i;  
  
   for(i=0;i<len;i++)  
        push(str[i]);  
  
   for(i=0;i<len;i++)  
      pop();  
}
 
Output :
imhskal irs


2.Write a C program for Infix to Postfix conversion using stack.

#include<stdio.h>
char stack[20];
int top = -1;
void push(char x)
{
    stack[++top] = x;
}
 
char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}
 
int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
}
 
main()
{
    char exp[20];
    char *e, x;
    printf("Enter the expression :: ");
    scanf("%s",exp);
    e = exp;
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c",pop());
            push(*e);
        }
        e++;
    }
    while(top != -1)
    {
        printf("%c",pop());
    }
}
Output :
Enter the expression :: (a+b)*c+(d-a)
ab+c*da-+


3.Write a C program to implement Queue using Two Stacks.

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
void push(struct node** top, int data);
int pop(struct node** top);
struct queue
{
    struct node *stack1;
    struct node *stack2;
};
void enqueue(struct queue *q, int x)
{
    push(&q->stack1, x);
}
void dequeue(struct queue *q)
{
    int x;
    if (q->stack1 == NULL && q->stack2 == NULL) {
        printf("queue is empty");
        return;
    }
    if (q->stack2 == NULL) {
        while (q->stack1 != NULL) {
        x = pop(&q->stack1);
        push(&q->stack2, x);
        }
    }
    x = pop(&q->stack2);
    printf("%d\n", x);
}
void push(struct node** top, int data)
{
    struct node* newnode = (struct node*) malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Stack overflow \n");
            return;
        }
    newnode->data = data;
    newnode->next = (*top);
    (*top) = newnode;
}
int pop(struct node** top)
{
    int buff;
    struct node *t;
    if (*top == NULL) {
        printf("Stack underflow \n");
        return 0;
    }
    else {
        t = *top;
        buff = t->data;
        *top = t->next;
        free(t);
        return buff;
    }
}
void display(struct node *top1,struct node *top2)
{
    while (top1 != NULL) {
        printf("%d\n", top1->data);
        top1 = top1->next;
    }
    while (top2 != NULL) {
        printf("%d\n", top2->data);
        top2 = top2->next;
    }
}
int main()
{
    struct queue *q = (struct queue*)malloc(sizeof(struct queue));
    int f = 0, a;
    char ch = 'y';
    q->stack1 = NULL;
    q->stack2 = NULL;
    while (ch == 'y'||ch == 'Y') {
        printf("Enter your choice\n1.enqueue(add an element to the queue)\n2.dequeue(remove an element from queue)\n3.display the elements in queue\n4.exit\n");
        scanf("%d", &f);
        switch(f) {
            case 1 : printf("Enter the element to be added to queue\n");
                     scanf("%d", &a);
                     enqueue(q, a);
                     break;
            case 2 : dequeue(q);
                     break;
            case 3 : display(q->stack1, q->stack2);
                     break;
            case 4 : exit(1);
                     break;
            default : printf("invalid\n");
                      break;
        }
    }
}

Output :
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
1
Enter the element to be added to queue
56
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
1
Enter the element to be added to queue
64
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
1
Enter the element to be added to queue
81
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
1
Enter the element to be added to queue
44
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
1
Enter the element to be added to queue
25
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
3
56
64
81
44
25
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
2
56
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
3
64
81
44
25
Enter your choice
1.enqueue(add an element to the queue)
2.dequeue(remove an element from queue)
3.display the elements in queue
4.exit
4


4.Write a C program for insertion and deletion of BST.

#include<stdio.h>
#include<stdlib.h>
struct node
{
         int key;
         struct node*left,*right;
};
struct node *newNode(int item)
{
         struct node *temp = (struct node *)malloc(sizeof(struct node));
         temp->key = item;
         temp->left = temp->right = Null;
         return temp;
}
void inorder(struct node * root)
{
         if (root != Null)
         {
               inorder(root->left);
               printf("%d", root->key);
               inorder(root->right);
         }
}
struct node* insert(struct node* node, int key)
{
         if (node == Null) return newNode(key);
         if (key < node->key)
             node->left = insert(node->left, key);
         else
             node->right = insert(node->right, key);
         return node;
}
struct node * minValueNode(struct node* node)
{
 
         struct node* current = node;
         while (current && current->left !=Null)
             current = current->left;
         return current;
}
struct node* deleteNode(struct node*root, int key)
{
         if(root == NULL) return root;
         if(key < root->key)
             root->left = deleteNode(root->left, key);
         else
         { 
             if(root->left == NULL)
             {
                  struct node *temp = root->right;
                  free(root);
                  return temp;
             }
             else if(root->right == NULL)
             {
                  struct node *temp = minValueNode(root->right);
                  root->key = temp->key;
                  root->right = deleteNode(root->right,temp->key);
          }
          return root;
}
int main()
{
         struct node *root = NULL;
         root = insert(root, 10);
         root = insert(root, 20);
         root = insert(root, 30);
         root = insert(root, 40);
         root = insert(root, 50);
         root = insert(root, 60);
            
         printf("Inorder traversal of the given tree \n");
         inorder(root);
         printf("\nDelete 20\n");
         root = deleteNode(root,20);
         printf("Inorder traversal of the modified tree \n");
         inorder(root);
         printf("\nDelete 40\n");
         root = deleteNode(root,30);
         printf("Inorder traversal of the modified tree \n");
         inorder(root);
         return 0;
}

Output :
Inorder traversal of the modified tree
10 20 30 40 50 60 
Delete 20
Inorder traversal of the modified tree
10 30 40 50 60
Delete 40
Inorder traversal of the modified tree
10 30 50 60








